{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Cw20HookMsg",
  "oneOf": [
    {
      "description": "Depcosit Cw20 tokens",
      "type": "object",
      "required": [
        "deposit_cw20"
      ],
      "properties": {
        "deposit_cw20": {
          "type": "object",
          "properties": {
            "commitment": {
              "type": [
                "array",
                "null"
              ],
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              },
              "maxItems": 32,
              "minItems": 32
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Wraps a cw20 token for the `sender` using the underlying Anchor's TokenWrapper contract",
      "type": "object",
      "required": [
        "wrap_token"
      ],
      "properties": {
        "wrap_token": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Wraps a cw20 token for the `sender` & deposit it into the contract.",
      "type": "object",
      "required": [
        "wrap_and_deposit"
      ],
      "properties": {
        "wrap_and_deposit": {
          "type": "object",
          "required": [
            "amount"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "commitment": {
              "type": [
                "array",
                "null"
              ],
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              },
              "maxItems": 32,
              "minItems": 32
            }
          }
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
