{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Cw20HookMsg",
  "oneOf": [
    {
      "description": "Executes a deposit or combination join/split transaction",
      "type": "object",
      "required": [
        "transact_deposit"
      ],
      "properties": {
        "transact_deposit": {
          "type": "object",
          "required": [
            "ext_data",
            "proof_data"
          ],
          "properties": {
            "ext_data": {
              "$ref": "#/definitions/ExtData"
            },
            "proof_data": {
              "$ref": "#/definitions/ProofData"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Wraps cw20 token for the `sender` using the underlying VAnchor's TokenWrapper contract Send the tokens back to `tx sender` or deposit to `this` contract",
      "type": "object",
      "required": [
        "wrap_token"
      ],
      "properties": {
        "wrap_token": {
          "type": "object",
          "required": [
            "is_deposit"
          ],
          "properties": {
            "is_deposit": {
              "type": "boolean"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Executes a deposit(cw20) or combination join/split transaction including wrapping or unwrapping",
      "type": "object",
      "required": [
        "transact_deposit_wrap"
      ],
      "properties": {
        "transact_deposit_wrap": {
          "type": "object",
          "required": [
            "ext_data",
            "proof_data"
          ],
          "properties": {
            "ext_data": {
              "$ref": "#/definitions/ExtData"
            },
            "proof_data": {
              "$ref": "#/definitions/ProofData"
            }
          }
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "ExtData": {
      "type": "object",
      "required": [
        "encrypted_output1",
        "encrypted_output2",
        "ext_amount",
        "fee",
        "recipient",
        "relayer"
      ],
      "properties": {
        "encrypted_output1": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          },
          "maxItems": 32,
          "minItems": 32
        },
        "encrypted_output2": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          },
          "maxItems": 32,
          "minItems": 32
        },
        "ext_amount": {
          "type": "string"
        },
        "fee": {
          "$ref": "#/definitions/Uint128"
        },
        "recipient": {
          "type": "string"
        },
        "relayer": {
          "type": "string"
        }
      }
    },
    "ProofData": {
      "type": "object",
      "required": [
        "ext_data_hash",
        "input_nullifiers",
        "output_commitments",
        "proof",
        "public_amount",
        "roots"
      ],
      "properties": {
        "ext_data_hash": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          },
          "maxItems": 32,
          "minItems": 32
        },
        "input_nullifiers": {
          "type": "array",
          "items": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint8",
              "minimum": 0.0
            },
            "maxItems": 32,
            "minItems": 32
          }
        },
        "output_commitments": {
          "type": "array",
          "items": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint8",
              "minimum": 0.0
            },
            "maxItems": 32,
            "minItems": 32
          }
        },
        "proof": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          }
        },
        "public_amount": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          },
          "maxItems": 32,
          "minItems": 32
        },
        "roots": {
          "type": "array",
          "items": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint8",
              "minimum": 0.0
            },
            "maxItems": 32,
            "minItems": 32
          }
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
