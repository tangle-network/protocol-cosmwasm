{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "UpdateConfigMsg",
  "type": "object",
  "properties": {
    "max_deposit_amt": {
      "anyOf": [
        {
          "$ref": "#/definitions/Uint256"
        },
        {
          "type": "null"
        }
      ]
    },
    "max_ext_amt": {
      "anyOf": [
        {
          "$ref": "#/definitions/Uint256"
        },
        {
          "type": "null"
        }
      ]
    },
    "max_fee": {
      "anyOf": [
        {
          "$ref": "#/definitions/Uint256"
        },
        {
          "type": "null"
        }
      ]
    },
    "min_withdraw_amt": {
      "anyOf": [
        {
          "$ref": "#/definitions/Uint256"
        },
        {
          "type": "null"
        }
      ]
    }
  },
  "definitions": {
    "Uint256": {
      "description": "An implementation of u256 that is using strings for JSON encoding/decoding, such that the full u256 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances out of primitive uint types or `new` to provide big endian bytes:\n\n``` # use cosmwasm_std::Uint256; let a = Uint256::from(258u128); let b = Uint256::new([ 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 2u8, ]); assert_eq!(a, b); ```",
      "type": "string"
    }
  }
}
